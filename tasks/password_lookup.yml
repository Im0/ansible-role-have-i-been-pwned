---
# Pwnded Passwords
# Search passwords by range: https://haveibeenpwned.com/API/v2#SearchingPwnedPasswordsByRange
# eg. https://api.pwnedpasswords.com/range/012A7
#
# content returned:
#0000FBE520181E2F1212E7AFDD59799E649:2
#001CA96F9D4B62554567C47172BB82E8A1B:2
#01AF45FB4F2AD6F9C28E6C963D38ADCD2C0:6
#01CE43A15503DB0FC9C23FFBC2B93F67D61:1
#020F9ECFAE947EAF0D779866C627AD7BE56:2

- set_fact:
    password_sha1_hashed: "{{ password | hash('sha1') | upper }}"
    password_search_for: "{{ password | hash('sha1') | truncate(5, True, '') | upper }}"
  when: password is defined
  no_log: true

- set_fact:
    password_sha1_hashed: "{{ hash }}"
    password_search_for: "{{ hash | truncate(5, True, '') | upper }}"
  when: hash is defined
  no_log: true

- name: Query password range in API
  uri:
    url: "https://api.pwnedpasswords.com/range/{{ password_search_for }}"
    return_content: yes
  register: password_list

- name: Debug password list
  debug:
    var: password_list
  when: debug is defined

# This worked OK but spits out a lot of looped items.  Settled for searching for the
# string in the .content and failing if a match.
#- name: Debug list individual passwords
#  debug:
#    msg: "This is a password: {{item}}"
#  when: (password_search_for + item) == password_sha1_hashed
#  with_items: "{{ password_list.content.splitlines() | map('regex_replace', ':.*', '') | list }}"

- name: Fail if the password is in the pwned database
  fail: 
    msg: "Password is compromised"
  when: password_sha1_hashed[-35:] in password_list.content
